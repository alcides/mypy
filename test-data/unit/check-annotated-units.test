[case testAnnotatedUnit0]
from typing_extensions import Annotated
x: Annotated[int, "m/s"]
reveal_type(x)  # N: Revealed type is "Annotated["builtins.int","m/s"]"
[builtins fixtures/tuple.pyi]

[case testAnnotatedUnit1]
from typing import Union
from typing_extensions import Annotated
x: Annotated[Union[int, str], "accounts"]
reveal_type(x)  # N: Revealed type is "Annotated["Union[builtins.int, builtins.str]","accounts"]""
[builtins fixtures/tuple.pyi]

[case testAnnotatedUnit2]
from typing_extensions import Annotated
x: Annotated[int, "m/s"]
reveal_type(x)  # N: Revealed type is "Annotated["builtins.int",'m/s']"
[builtins fixtures/tuple.pyi]



[case testAnnotatedNestedUnit0]
from typing_extensions import Annotated
x: Annotated[Annotated[int, "m/s"], "m/s"]
reveal_type(x)  # N: Revealed type is "Annotated["Annotated["builtins.int","m"]","m/s"]"
[builtins fixtures/tuple.pyi]


[case testAnnotatedUnitDifferentName]
from typing_extensions import Annotated as An
x: An[int, "m/s"]
reveal_type(x)  # N: Revealed type is "Annotated["builtins.int","m/s"]"
[builtins fixtures/tuple.pyi]

[case testAnnotatedAliasSimple]
from typing import Tuple
from typing_extensions import Annotated
Alias = Annotated[Tuple[int, ...], "m/s"]
x: Alias
reveal_type(x)  # N: Revealed type is "Annotated["builtins.tuple[builtins.int, ...]","m/s"]
[builtins fixtures/tuple.pyi]

[case testAnnotatedUnitAliasTypeVar]
from typing import TypeVar
from typing_extensions import Annotated
T = TypeVar('T')
Alias = Annotated[T, "m/s"]
x: Alias[int]
reveal_type(x)  # N: Revealed type is "Annotated["builtins.int","m/s"]"
[builtins fixtures/tuple.pyi]

[case testAnnotatedUnitAliasGenericTuple]
from typing import TypeVar, Tuple
from typing_extensions import Annotated
T = TypeVar('T')
Alias = Annotated[Tuple[T, T], ...]
x: Alias[int]
reveal_type(x)  # N: Revealed type is "Annotated["Tuple[builtins.int, builtins.int]","m/s"]"
[builtins fixtures/tuple.pyi]

[case testAnnotatedAliasGenericUnion]
from typing import TypeVar, Union
from typing_extensions import Annotated
T = TypeVar('T')
Alias = Annotated[Union[T, str], "m/s"]
x: Alias[int]
reveal_type(x)  # N: Revealed type is "Annotated["Union[builtins.int, builtins.str]","m/s"]"
[builtins fixtures/tuple.pyi]
